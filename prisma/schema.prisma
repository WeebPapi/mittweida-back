// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  email          String         @unique
  password       String
  firstName      String
  lastName       String
  profilePicture String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  groups         GroupMember[]
  photos         Photo[]
  polls          Poll[]
  pollVotes      PollVote[]
}

model Group {
  id        String        @id @default(uuid())
  name      String
  code      String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  members   GroupMember[]
  photos    Photo[]
  polls     Poll[]
}

model GroupMember {
  id       String   @id @default(uuid())
  userId   String
  groupId  String
  isAdmin  Boolean  @default(false)
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  caption   String?
  location  String?
  userId    String
  groupId   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: SetNull)
}

model Poll {
  id        String       @id @default(uuid())
  question  String
  options   PollOption[]
  createdAt DateTime     @default(now())
  expiresAt DateTime
  createdBy String
  groupId   String
  user      User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  group     Group        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  votes     PollVote[]
}

model PollOption {
  id         String     @id @default(uuid())
  text       String
  pollId     String
  activityId String
  activity   Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
  poll       Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  votes      PollVote[]

  @@index([activityId])
}

model PollVote {
  id           String     @id @default(uuid())
  userId       String
  pollId       String
  pollOptionId String
  createdAt    DateTime   @default(now())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  poll         Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  option       PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId])
}

model Activity {
  id          String       @id @default(uuid())
  name        String
  description String
  address     String
  latitude    Float
  longitude   Float
  videoUrl    String?
  imageUrl    String?
  category    String
  openHours   Json? // Store as JSON with day-specific hours
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  PollOption  PollOption[]
}
